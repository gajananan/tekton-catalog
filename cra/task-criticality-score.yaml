---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-criticality-score
spec:
  params:
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "0"
    - name: git_token
      description: git token for criticality score
      default: ""       
  #results:
  #  - name: status
  #    description: status of bom task, possible value are-success|failure
  #  - name: evidence-store
  #    description: filepath to store bom task evidence
  stepTemplate:
    env:
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: criticality-score
      image: gcr.io/cra-criticality/critical-score:dev
      workingDir: "/artifacts"
      env: 
        - name: GITHUB_AUTH_TOKEN
          value: $(params.git_token) 
      volumeMounts:
      # - mountPath: /steps
      #    name: steps-volume
        - mountPath: /git-token-dir
          name: git-token
      command: ["/bin/bash", "-c"]
      args:
        - |        
          echo "---------------- Checking Generated BOM --------------- "
          ls /git-token-dir/
          ls /git-token-dir
         
          echo "GITHUB_AUTH_TOKEN: $(cat /git-token-dir/git_token)"
          export GITHUB_AUTH_TOKEN=$(cat /git-token-dir/git_token)
          
          cat ./gitsecure-cis-results.json

          cat ./gitsecure-cis-results.json | jq -r '.assets[] | select(."npm-packages" != null)' | jq -r '."npm-packages"[] |  "\(.name)"'  | while read i; do
          echo "package name : $i"

          repo=$(curl -sL  https://registry.npmjs.org/-/v1/search\?text\="$i"\&size\=1 | jq . | jq -r .'"objects"' | jq ".[]" | jq -r ".package.links.repository")

          if [ repo != null ]; then
            echo "repo: $repo"
            criticality_score --repo $repo
          fi
          done
          echo "----------------------------------------------"
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: git-token
      secret:
        secretName: $(params.git_token)